#!/usr/bin/zsh

rp() {
	realpath "$@"
}
cdrp() {
	cd "$(rp . | head -1)"
}


alias doc='docker'
alias dos='doc start'

docker-run() {
	docker run -it --rm \
		--log-driver='none' \
		--env='TZ=Europe/Berlin' \
		--cpus="$(( $(nproc) * 0.95 ))" \
		$@
}
alias dor='doc run -it --rm'

decker-exec() {
	docker exec -it $@
}
alias dex='doc exec -it'
alias dol='doc logs -f --tail 25'

dob() {
	DOC_CPU_SCHED_FACTOR="1000000"
	DOC_CPU_QUOTA_FLOAT=$(( $(nproc) * 0.95 * ${DOC_CPU_SCHED_FACTOR} ))
	DOC_CPU_QUOTA_INT=$(echo ${DOC_CPU_QUOTA_FLOAT} | cut -d'.' -f1)
	docker build \
		--env="TZ=Europe/Berlin" \
		--cpu-period="$(( 1 * ${DOC_CPU_SCHED_FACTOR} ))" \
		--cpu-quota="${DOC_CPU_QUOTA_INT}" \
		$@
}


rundoc-extra-paths() {
	for extra_path in ${RUNDOC_EXTRA_PATHS}; do
		p=$(echo ${extra_path} | cut -d ':' -f1)
		RUNDOC_EXTRA_PARAMS+=" -v ${p}:${extra_path}"
	done
}

rundoc-workpath() {
	if [ -d "${RUNDOC_EXTRA_WORKPATH}" ]; then
		WORKPATH=$(realpath "${RUNDOC_EXTRA_WORKPATH}")
	else
		WORKPATH=$(pwd)
	fi
}

rundoc-selinux() {
	if [ -n "${RUNDOC_SELINUX}" ]; then
		RD_MO_SEL=":z"
		unset RUNDOC_SELINUX
	else
		unset RD_MO_SEL
	fi
}

run-doc() {
#	set -x
	# resolve symlinks (consistent paths for compiling with CMake)
    cdrp

	rundoc-extra-paths
	rundoc-workpath
	rundoc-selinux

	# only run in safe paths
	unset safe_container_path
	for white_path in $(cat ${ZSHCFGDIR}/whitelist_container); do
		if echo ${PWD} | grep -qE "${white_path}"; then
			safe_container_path="true"
			break
		fi
	done
	if [[ -z "${safe_container_path}" ]]; then
		echo "Considered unsafe to operate in ${PWD}"
		return 1
	fi

    docker-run \
		$(echo ${RUNDOC_EXTRA_PARAMS}) \
		-v "$(pwd)":"$(pwd)${RD_MO_SEL}" \
		-w "${WORKPATH}" $@

	unset WORKPATH
#	set +x
}

run-doc-pers() {
    bc_pers_env="${OLDHOME}/.containerbox"
    mkdir -p ${bc_pers_env}/root
    mkdir -p ${bc_pers_env}/home/user1000

	zsh ${OLDHOME}/.config/zsh/env_toolbox

    run-doc \
		-e OLDHOME=${OLDHOME} \
		-e HOME=${bc_pers_env}/home/user1000 \
		-e TMPDIR=/tmp/containerbox \
		-v "${bc_pers_env}/root":"/root${RD_MO_SEL}" \
		-v "${bc_pers_env}/home/user1000":"${bc_pers_env}/home/user1000${RD_MO_SEL}" \
		-v "/tmp/containerbox":"/tmp/containerbox:z" \
		$@
}

run-doc-ssh() {
#	set -x
	if ! [ $# -eq 1 ] || [ -z "$1" ]; then
		echo "missing Image name!"
		return 1
	fi
	image_name="$1"

    bc_pers_env="${OLDHOME}/.containerbox"
	sshd_exec="/tmp/containerbox/sshd.sh"
	mkdir -p $(dirname ${sshd_exec})

	cat << 'EOF' > ${sshd_exec}
#!/bin/sh
mkdir -p /run/sshd
exec $(which sshd) -D
EOF
	chmod +x ${sshd_exec}
	mkdir -p ${bc_pers_env}/etc/ssh

	ssh_dc=$(docker container list --format "{{.ID}} {{.Ports}}" | \
			awk '$2 ~ /127.0.0.1:3322->22\/tcp/ {print $1}')
	[ -n "${ssh_dc}" ] && docker stop ${ssh_dc}

	doc_log_driver=$(docker info --format '{{ .Host.LogDriver }}')

	run-doc-pers \
		-p 127.0.0.1:3322:22 \
		--cap-add='SYS_CHROOT' \
		--name=remote-dev \
		--detach \
		--log-driver=${doc_log_driver} \
		-v "${bc_pers_env}/etc/ssh":/etc/ssh:z \
		${image_name} \
		${sshd_exec}
#	set +x
}

run-box() {
	cdrp

	docker-exec \
		--env OLDHOME=${OLDHOME} \
		--env HOME=${OLDHOME}/.containerbox/home/user1000 \
		--env TMPDIR=/tmp/containerbox \
		-w $(pwd) \
		$@
}


nix-cage-shell() {
	case "${PWD}" in
	"${HOME}")
		echo "Not in this directory ${PWD}" >&2
		return
	;;
	esac

	mkdir -p ${XDG_CACHE_HOME}/"nix-cage"
	mkdir -p ${XDG_DATA_HOME}/"nix-cage"/home
	touch    ${XDG_DATA_HOME}/"nix-cage"/home/.zhistory

	cdrp
	nix-shell $@ \
		--command "nix-cage
			--config /etc/nix-cage/devel.json
			--command zsh"
}
