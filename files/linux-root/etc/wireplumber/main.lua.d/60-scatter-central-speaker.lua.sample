--[[
hardware_om = ObjectManager {
	Interest {
		type = "node",
		Constraint { "node.name", "matches", "alsa" }
	},
	Interest {
		type = "node",
		Constraint { "node.name", "matches", "bluez*" }
	}
}
--]]

out_port_om = ObjectManager {
    Interest {
        type = "port",
        Constraint { "port.direction", "=", "out" }
    }
}

in_port_om = ObjectManager {
    Interest {
        type = "port",
        Constraint { "port.direction", "=", "in" }
    }
}

link_om = ObjectManager {
    Interest {
        type = "link",
    }
}


function find_port(node_id, port_om)
	for port in port_om:iterate() do
		if port.properties["node.id"] == node_id then
			print(port.properties["object.id"])
			return port.properties["object.id"]
		end
	end
end



local combine_sink_name = "combine_out_source"

local link_props = {
	["link.output.node"] = nil,
	["link.output.port"] = nil,
	["link.input.node"] = nil,
	["link.input.port"] = nil,
}

combine_om = ObjectManager {
	Interest {
		type = "node",
		Constraint { "node.name", "=", combine_sink_name },
	}
}

combine_om:connect("object-added", function(om, node)
	object_id = node.properties["object.id"]
	link_props["link.output.node"] = object_id
	link_props["link.output.port"] = find_port(object_id, out_port_om)
end)

combine_om:activate()
out_port_om:activate()
